package org.demo.算法;
//递归指的是方法中调用方法本身的现象。
//递归的注意点:递归一定要有出口，否则就会出现内存溢出
/*递归算法的作用
把一个复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解
递归策略只需少量的程序就可描述出解题过程所需要的多次重复计算*/
//***书写递归的两个核心:
//找出口****什么时候不再调用方法
//找规则****如何把大问题变成规模较小的问题

public class 递归算法 {
    public static void main(String[] args) {
        //需求: 刺用递归求1-100之间的和
        //100 + 99 + 98 + 97 + 96 + 95 +...+ 2 + 1

        //大问题拆解成小问题
        // 1~100之间的和 = 100 + (1~99之间的和)
        // 1~99之间的和 = 99 + (1~98之间的和)
        // 1~98之间的和 = 98 + (1~97之间的和)
        // 。。
        //1~2之间的和 = 2 + (1~1之间的和)
        //1~1之间的和 = 1(递归的出口)
        int sum = getSum(100);
        System.out.println(sum);


        //阶乘
        int jc = getJC(5);
        System.out.println(jc);
        //心得:
        //方法内部再次调用方法的时候，参数必须要更加 靠近出口
        //第一次调用: 5
        //第二次调用: 4
    }

    private static int getJC(int i) {
        if (i==1)return 1;                  //出口
        return i * getJC(i - 1);         //每一次都要更接近出口
    }


    private static int getSum(int i) {
        if (i==1)return 1;
        return i + getSum(i - 1);
    }


}
