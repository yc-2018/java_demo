package org.demo.常用API.正则;
/*正则表达式的作用
作用一:校验字符串是否满足规则
作用二:在一段文本中查找满足要求的内容
*/
/**字符类(只匹配一个字符)---------------------
*[abc]          只能是a,b,或c
*[^abc]         除了a, b,c之外的任何字符
*[a-zA-Z]       a到z A到Z，包括 (范围)
*[a-d[m-p]]     a到d，或m到p
*[a-z&&[def]]   d,e,或f(交集)
*[a-z&&[^bc]]   a到z，除了b和c (等同于[ad-z])
*[a-z&&[^m-p]]  a到z，除了m到p (等同于[a-lq-z])
* */
/*预定义字符(只匹配一个字符)------------------
*.              任何字符
*\d             一个数字: [0-9]
*\D             非数字: [^0-9]
*\s             一个空白字符: [\t\n\x0B\f\r]          \x0B是垂直tab
*\S             非空白字符: [^\s]
*\w             [a-zA-Z_0-9]英文、数字、下划线
*\W             [^\w] 一个非单词字符
* */
/*数量词
*X?             X，一次或0次
*X*             X，零次或多次
*X+             X，一次或多次
*X{n}           X，正好n次
*X{n,}          X，至少n次
*X{n,m}         X，至少n但不超过m次
* */
/**其他-----------
*忽略大小写的书写方式
* (?i)abc       在匹配的时候忽略abc的大小写
* a(?i)bc       在匹配的时候忽略bc的大小写
* a((?i)b)c     在匹配的时候只忽略b的大小写
* []里面的内容出现一次
* ()分组
* ^取反
* &&交集，不能写单个的&
* |写在方括号外面表示并集
* .任意字符除了/n 回车符号不匹配
* (?:X)在正则中表示所匹配的子组X不作为结果输出---正常情况(X)中的X会被作为新增的一个组序号输出，比如(A)(B)，A的序号1,B的序号2----如果(?:A)(B)，A将没有序号不输出,B的序号为1
* \\组号  表示把第X组的内容再出来用一次
* */

public class 正则表达式 {
    public static void main(String[] args) {
        String re = "1235464846";
        System.out.println(re.matches("[1-9]\\d{5,10}"));

        System.out.println("9".matches("[^a-zA-Z]"));
        System.out.println("9".matches("[0-9]"));
        System.out.println("99".matches("[0-9]"));      //false  一个方括号只能匹配一个字符

        //细节: 如果要求两个范围的交集，那么需要写符号 &&//如果写成了一个&，那么此时&表示就不是交集了，而是一个简简单单的&符号
        System.out.println("&".matches("[a-z&A-W]"));   //true

        System.out.println("a".matches("a-z&&[^b-d]"));   //true

    }
}
