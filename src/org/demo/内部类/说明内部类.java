package org.demo.内部类;
//成员内部类+静态内部类+局部内部类=了解----匿名内部类一掌屋

public class 说明内部类 {                //外部类-----
//类的五大成员-----属性    方法  构造方法   代码块  内部类
// 内部类表示的事物是外部类的一部分 内部类单独出现没有任何意义

    /*  内部类的访问特点
        *内部类可以直接访问外部类的成员，包括私有
        *外部类要访问内部类的成员，必须创建对象
    */
        //写在一个类里面的类就叫做内部类
        //什么时候用到内部类?
        //B类表示的事物是A类的一部分，且B单独存在没有意义
        // 比如: 汽车的发动机  ArrayList的迭代器   人的心脏  等等
    int a;


    public class 成员内部类{                   //内部类-----
        public int a;
//      static int b;   //jdk16以上才可以用静态成员变量
//        成员内部类
//        写在成员位置的，属于外部类的成员。
//        成员内部类可以被一些修饰符所修饰，比如: private，默认，protected，public，static等
//        在成员内部类里面，JDK16之前不能定义静态变量，JDK 16开始才可以定义静态变量。
        /*
        * 获取成员内部类对象的两种方式?
        *方式一: 当成员内部类被private修饰时
        *在外部类编写方法，对外提供内部类对象return new 成员内部类();
        *方式二:当成员内部类被非私有修饰时，直接创建对象
        *Outer.Inner oi = new Outer().new Inner();
        *
        * 外部类成员变量和内部类成员变量重名时，在内部类如何访问?---System.out.printIn(外部类.this.变量名);
        * */
        }
    static class 静态内部类{
        //什么是静态内部类?-----静态内部类是一种特殊的成员内部类
        //直接创建静态内部类对象的方式?---Outer.Inner oi = new Outer.Inner()  //少了内部类的new
        //如何调用静态内部类中的方法?
            // 非静态方法:先创建对象，用对象调用
            // 静态方法: 外部类名.内部类名.方法名())
        public void 局部内部类方法(){
            System.out.println("这里是2022.12.29 1：44 晚安");
            class 局部内部类{    //不能修饰public等 就像方法内部变量一样
                //将内部类定义在方法里面就叫做局部内部类，类似于方法里面的局部变量。
                //外界是无法直接使用，需要在方法内部创建对象并使用。
                //该类可以直接访问外部类的成员，也可以访问方法内的局部变量
                public void show(){
                    System.out.println("明天早上8点要干活");
                }
            }
            局部内部类 test = new 局部内部类();
            test.show();


            //匿名内部类...重点  ---隐藏了名字的内部类
            //可以写在成员位置，也可以写在局部位置

            new 说明(){
                String 匿名内部类 = "匿名内部类本质上就是隐藏了名字的内部类";
                @Override
                public void show() {
                    System.out.println("重写类 或 接口 方法;");
                }
                // 格式的细节
                //包含了继承或实现，方法重写，创建对象。
                //整体就是一个类的子类对象或者接口的实现类对象

                /*使用场景
                    当方法的参数是接口或者类时
                    以接口为例，可以传递这个接口的实现类对象如果实现类只要使用一次，就可以用匿名内部类简化代码*/
            };
        }
    }

    public static void main(String[] args) {
        new 说明(){
            @Override
            public void show() {
                System.out.println("这就是匿名内部类重写后的方法1");
            }
        }.show();    //没有方法也要有；结束

        //另一种写法
        说明 a= new 说明(){
            @Override
            public void show() {
                System.out.println("这就是匿名内部类重写后的方法2 这种方法可以写在成员位置，");
            }
        };          //大括号后面有分号；
        a.show();
    }
}

