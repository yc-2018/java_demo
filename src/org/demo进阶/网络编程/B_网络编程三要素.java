//仰晨study 创建时间2023/2/9 17:03 星期四
package org.demo进阶.网络编程;

public interface  B_网络编程三要素 {/*
IP
    设备在网络中的地址，是唯一的标识。
端口号
    应用程序在设备中唯一的标识。
协议
    数据在网络中传输的规则，常见的协议有UDP、TCP、http、https、ftp。


IP:————————————————————————————————————————————————————————————————————————————————
    IPv4 `点分10进制
    IPv6  冒分十六进制表示法
           2001:0DB8:0000:0023:0008:0800:200C:417A————省略前面的0————>2001:DB8:0:23:8:800:200C:417A
            特殊情况: 如果计算出的16进制表示形式中间有多个连续的0
            FF01:0:0:0:0:0:0:1101————0位压缩表示法————>FFO1::1101

        总结：
        1.Ip的作用
                设备在网络中的地址，是唯一的标识
        2.IPv4有什么特点
                目前的主流方案
                最多只有2^32次方个ip，目前已经用完了
        3.IPv6有什么特点
                为了解决IPv4不够用而出现的
                最多有2^128次方个ip
                可以为地球上的每一粒沙子都设定ip

    IPv4的小细节
            IPv4的地址分类形式
                ·公网地址(万维网使用)和私有地址(局域网使用)。
                ·192.168.开头的就是私有址址，范围即为192.168.0.0--192.168.255.255，专门为组织机构内部使用，以此节省IP
            特殊IP地址
                ·127.0.0.1，也可以是localhost: 是回送地址也称本地回环地址，也称本机IP，永远只会寻找当前所在本机。
                ···疑问:假设192.168.1.100 是我电脑的IP，那么这个IP跟127.0.0.1是一样的吗?
                ·······不一样······
                                    建议:自己练习就写127.0.0.1

        常用的CMD命令
            ipconfig: 查看本机IP地址
            ping: 检查网络是否连通
————————————————————————————————————————————————————————————————————————————————————
端口号:——————————————————————————————————————————————————————————————————————————————
    应用程序在设备中唯一的标识。
        端口号:由两个字节表示的整数，取值范围:0~65535
              其中0~1023之间的端口号用于一些知名的网络服务或者应用
              我们自己使用1024以上的端口号就可以了

    注意: 一个端口号只能被一个应用程序使用。
————————————————————————————————————————————————————————————————————————————————————
协议：———————————————————————————————————————————————————————————————————————————————
    计算机网络中，连接和通信的规则被称为网络通信协议
    ·OSI参考模型:世界互联协议标准，全球通信规范，单模型过于理想化，未能在因特网上进行广泛推广
    ·TCP/IP参考模型(或TCP/IP协议): 事实上的国际标准

    OSI参考模型     TCP/IP参考模型          TCP/IP参考模型各层对应协议                        面向哪些
    ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
    应用层                                                                         一般是应用程序需要关注的。
    表示层             应用层             HTTP、FTP、Telnet、DNS.                    如浏览器，邮箱。程序员一般在
    会话层                                                                         这一层开发
    ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
    传输层             传输层             TCP.UDP...                               选择传输使用的TCP，UDP协议
    ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
    网络层             网络层             IP、ICMP、ARP.                            封装自己的IP，对方的IP等信息
    ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
    数据链路层                           硬件设备。
                    物理+数据链路层       010100101010100101010...                  转换成二进制利用物理设备传输
    物理层         （百度叫网络接口层）
    ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

UDP协议=============================在线视频  直播   视频/语音通话 等
不管是否已经连接成功
用户数据报协议(User Datagram Protocol)
UDP是面向无连接通信协议。
速度快，有大小限制一次最多发送64K，数据不安全，易丢失数据
        ++++++++++++++++++++++++++
        UDP通信程序(发送数据)
        1、找快递公司         创建发送端的DatagramSocket对象
        2、打包礼物           数据打包(DatagramPacket
        3、快递公司发送包裹    发送数据
        4、付钱走人           释放资源

        UDP通信程序(接收数据)
        1、找快递公司            创建接收端的DatagramSocket对象
        2、接收箱子             接收打包好的数据
        3、从箱子里面获取礼物     解析数据包
        4、签收走人             释放资源

   UDP的三种通信方式(代码实现)
   1、单播
          之前写的都是单播
   2、主播
          组播地址: 224.0.0.0~ 239.255.255.255
            其中224.0.0.0 ~ 224.0.0.255 为预留的组播地址（我们可用的）
   3、广播
          广播地址: 255.255.255.255

TCP协议=============================================下载文件  聊天内容
传输控制协议TCP(Transmission Control Protocol)
TCP协议是面向连接的通信协议。
速度慢，没有大小限制，数据安全。

TCP通信协议是一种可靠的网络协议，它在通信的两端各建立一个Socket对象通信之前要保证连接已经建立
通过Socket产生IO流来进行网络通信
    客户端                                                                             服务器
    Socket————输出流——>————————————————通信之前保证连接已经建立——————————————————输入流——>ServerSocket

    1、创建客户端的Socket对象(Socket)与指定服务端连接                        1、创建服务器端的Socket对象(ServerSocket)
            Socket(string host, int port)                                       ServerSocket(int port)
    2、获取输出流，写数据                                                  2、监听客户端连接，返回一个Socket对象
            OutputStream getOutputStream()                                      Socket accept()
    3、释放资源                                                          3、获取输入流，读数据，并把数据显示在控制台
            void close()                                                        InputStream getInputStream()
                                                                        4、释放资源
                                                                                void close()

代码细节：在创建对象的同时会连接服务端  如果连接不上，代码会报错

     ===========三次握手协议保证连接建立================

               客户端向服务器发出连接请求
  客户端——————————————————————————————————————>服务器端
                等待服务器确认

              服务器向客户端返回一个响应
  客户端<——————————————————————————————————————服务器端
                告诉客户端收到了请求

             客户端向服务器再次发出确认信息
  客户端——————————————————————————————————————>服务器端
                    连接建立

    四次挥手
        利用这个协议断开连接
        而且保证连接通道里面的数据已经处理完毕了

               客户端向服务器发出取消连接请求
    客户端——————————————————————————————————————>服务器端

                服务器向客户端返回一个响应
    客户端<——————————————————————————————————————服务器端 ↘
                 表示收到客户端取消请求                       ↘
                                                            服务器将最后的数据==处理完毕
                服务器向客户端发出确认取消信息                  ↙
    客户端<——————————————————————————————————————服务器端 ←


                   客户端再次发送确认消息
    客户端——————————————————————————————————————>服务器端
                        连接取消

建议不要手动关io流  因为发送端发送完成就马上关闭  接收端可能还没有接收完成就断开了通道 导致数据不全
                 又因为IO流是在Socket上的所以关闭他的时候 IO流就自动消失了







*/

}
